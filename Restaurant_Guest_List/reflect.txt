//==============================================
// Name:           Yuankai Han
// Student Number: 154477194
// Email:          yhan77@myseneca.ca
// Section:        NAA
// Date:           2021.9.26
//==============================================
// Worshop#2: (DIY) Restaurant Guest List
// This file tests the DIY section of your workshop  
//==============================================

Through this workshop and class, I could learn how to use the dynamic memory allocation in C++.

First of all, I was able to learn how to use dynamic memory, which is flexible than static memory and can compile without wasting memory. Unlike static memory, dynamic memory can be allocated as much memory as the user wants. For example, in this DIY, when I input the Guest name, I received it using “ char m_name[21]” because I don’t know the size of the Guest name. However, when I knew the number of guests and the size of the Guest name, I only had to allocate the corresponding number of memory using "new". “new” can enter the type and size that user want to assign to a pointer-type variable. For instance, “temp =  new Guest[theGuestList.m_noOfGuests + 1]”. It is to note that when assigning a character array, I must assign one more space than the string size. The reason is to enter a null value at the end. Then, I use for loop to copy old memory content to newly allocated.
When going out of the for loop, I update the data pointer to point to newly allocated memory. 
For example, “strcpy(temp[i].m_name, theGuestList.m_gst[i].m_name);
                    temp[i].m_phno = theGuestList.m_gst[i].m_phno;. 
Because it is char *, copy an pointer-character to another array, we must use strcpy() function to deal with. And then, copy aGuest’s data to temp.
Finally, most importantly, if I allocated dynamic memory, I must delete the memory that I allocated before terminating. If memory is not deleted, a memory leak error will occur.

When we deal with the dynamic memory allocation.
If we use an uninitialized pointer, it get a segmentation fault. 
If we use a NULL pointer, it is meaningless since there is nothing in this pointer. 
We have always save within the range, if going out of the range, then get a segmentation fault. 
If we don’t delete the pointer which is already point to a dynamic memory allocation, and also save it to another one, it called memory leak. 
